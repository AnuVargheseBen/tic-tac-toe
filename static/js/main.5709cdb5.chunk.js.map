{"version":3,"sources":["square.js","board.js","winner.js","Game.js","App.js","reportWebVitals.js","index.js"],"names":["Square","props","value","className","onClick","handleUpdate","index","Board","i","this","gameState","handleStateUpdate","Grid","item","xs","Button","variant","handleReset","renderSquare","Component","Winner","handleWinner","Game","asyncSetState","state","Promise","resolve","reject","setState","a","isGameEnd","newBoard","board","setWinner","handleSystemMove","winner","boardArray","random","Math","floor","length","calculateWinner","winnerPattern","Array","fill","style","width","marginLeft","marginRight","React","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5709cdb5.chunk.js","sourcesContent":["import React from \"react-dom\";\r\n\r\n\r\nfunction Square(props) {\r\n  if (!props.value) {\r\n    return (\r\n      <div className=\"game-board-style\">\r\n        <button\r\n          className=\"square\"\r\n          onClick={() => props.handleUpdate(props.index, \"X\")}\r\n        >\r\n          {props.value}\r\n        </button>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div>\r\n        <button className=\"square\">{props.value}</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Square;\r\n","import React, { Component } from \"react\";\r\nimport Square from \"./square\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nclass Board extends Component {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        value={this.props.gameState[i]}\r\n        index={i}\r\n        handleUpdate={this.props.handleStateUpdate}\r\n      />\r\n    );\r\n  }\r\n  render() {\r\n    const status = \"NEW PLAYER:X\";\r\n    return (\r\n      <div>\r\n        <div className=\"status\">\r\n          {status}\r\n          <Grid item xs={3}>\r\n            <Button variant=\"contained\" onClick={this.props.handleReset}>\r\n              Reset\r\n            </Button>\r\n          </Grid>\r\n        </div>\r\n\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\n\r\nfunction Winner({ handleWinner }) {\r\n  if (!handleWinner) return null;\r\n\r\n  return (\r\n    <div>\r\n      <h1> {handleWinner === \"X\" ? \"You are the winner\" : \"You failed\"} </h1>;\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Winner;\r\n","import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Board from \"./board\";\r\nimport \"./style.css\";\r\nimport Winner from \"./winner\";\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { board: Array(9).fill(null), winner: \"\", isGameEnd: false };\r\n  }\r\n\r\n  asyncSetState = (state) =>\r\n    new Promise((resolve, reject) => this.setState(state, resolve)); //Promisifying setSttae becoz setState is an async function\r\n\r\n  handleStateUpdate = async (index, value) => {\r\n    if (this.state.isGameEnd) return;\r\n    const newBoard = [...this.state.board];\r\n    newBoard[index] = value;\r\n    await this.asyncSetState({ board: newBoard });\r\n    await this.setWinner();\r\n    this.handleSystemMove();\r\n  };\r\n\r\n  handleReset = () => {\r\n    this.setState({ board: [] ,winner:'',isGameEnd:false});\r\n  };\r\n\r\n  handleSystemMove = () => {\r\n    if (this.state.isGameEnd) return;\r\n    const boardArray = [...this.state.board];\r\n    const random = Math.floor(Math.random() * boardArray.length);\r\n    for (let i = random; i < boardArray.length + random; i++) {\r\n      const index = i % boardArray.length;\r\n      if (boardArray[index] !== \"X\" && boardArray[index] !== \"O\") {\r\n        boardArray[index] = \"O\";\r\n        break;\r\n      }\r\n    }\r\n    this.setState({ board: boardArray }, this.setWinner);//passing setWinner as a callback\r\n  };\r\n\r\n  setWinner = () => {\r\n    const winner = this.calculateWinner();\r\n    return this.asyncSetState({ winner, isGameEnd: !!winner });\r\n  };\r\n  calculateWinner = () => {\r\n    const board = this.state.board;\r\n    const winnerPatterns = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let winnerPattern of winnerPatterns) {\r\n      if (\r\n        board[winnerPattern[0]] === board[winnerPattern[1]] &&\r\n        board[winnerPattern[1]] === board[winnerPattern[2]]\r\n      ) {\r\n        return board[winnerPattern[0]];\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"game\" style={{ width: \"100%\" }}>\r\n        <div\r\n          className=\"game-board\"\r\n          style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n        >\r\n          <Board\r\n            gameState={this.state.board}\r\n            handleStateUpdate={this.handleStateUpdate}\r\n            handleReset={this.handleReset}\r\n          />\r\n          <Winner handleWinner={this.state.winner} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Game;\r\n","import React from \"react-dom\";\nimport Game from \"./Game\";\n\n\nfunction App() {\n  return <div>\n    <Game/>\n  </div>\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}