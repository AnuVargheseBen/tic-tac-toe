{"version":3,"sources":["square.js","board.js","winner.js","Game.js","App.js","reportWebVitals.js","index.js"],"names":["Square","props","value","className","onClick","handleUpdate","index","Board","i","this","gameState","handleStateUpdate","Grid","item","xs","Button","variant","handleReset","renderSquare","Component","Winner","handleWinner","Game","newBoard","state","board","setState","handleSystemMove","boardArray","length","calculateWinner","winnerPattern","Array","fill","style","width","marginLeft","marginRight","React","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ee21c852.chunk.js","sourcesContent":["import React from \"react-dom\";\r\n\r\n\r\nfunction Square(props) {\r\n  if (!props.value) {\r\n    return (\r\n      <div className=\"game-board-style\">\r\n        <button\r\n          className=\"square\"\r\n          onClick={() => props.handleUpdate(props.index, \"X\")}\r\n        >\r\n          {props.value}\r\n        </button>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div>\r\n        <button className=\"square\">{props.value}</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Square;\r\n","import React, { Component } from \"react\";\r\nimport Square from \"./square\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nclass Board extends Component {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        value={this.props.gameState[i]}\r\n        index={i}\r\n        handleUpdate={this.props.handleStateUpdate}\r\n      />\r\n    );\r\n  }\r\n  render() {\r\n    const status = \"NEW PLAYER:X\";\r\n    return (\r\n      <div>\r\n        <div className=\"status\">\r\n          {status}\r\n          <Grid item xs={3}>\r\n            <Button variant=\"contained\" onClick={this.props.handleReset}>\r\n              Reset\r\n            </Button>\r\n          </Grid>\r\n        </div>\r\n\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\n\r\nfunction Winner(props) {\r\n  if (props.handleWinner===\"X\") {\r\n    return <h1>The winner is X</h1>;\r\n  } else if(props.handleWinner===\"O\"){\r\n    return <h1>The winner is system</h1>;\r\n  }\r\n  else{\r\n      return null;\r\n  }\r\n}\r\n\r\nexport default Winner;\r\n","import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Board from \"./board\";\r\nimport \"./style.css\";\r\nimport Winner from \"./winner\";\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { board: Array(9).fill(null) };\r\n  }\r\n  handleStateUpdate = (index, value) => {\r\n    const newBoard = [...this.state.board];\r\n    newBoard[index] = value;\r\n    this.setState({ board: newBoard }, this.handleSystemMove);\r\n  };\r\n  handleReset = () => {\r\n    this.setState({ board: [] });\r\n  };\r\n  handleSystemMove = () => {\r\n    const boardArray = [...this.state.board];\r\n    for (let i = 0; i < boardArray.length; i++) {\r\n      if (boardArray[i] !== \"X\" && boardArray[i] !== \"O\") {\r\n        boardArray[i] = \"O\";\r\n        break;\r\n      }\r\n    }\r\n    this.setState({ board: boardArray });\r\n  };\r\n  calculateWinner = () => {\r\n    const board = this.state.board;\r\n    const winnerPatterns = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let winnerPattern of winnerPatterns) {\r\n      if (\r\n        board[winnerPattern[0]] === board[winnerPattern[1]] &&\r\n        board[winnerPattern[1]] === board[winnerPattern[2]]\r\n      ) {\r\n        return board[winnerPattern[0]];\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"game\" style={{width:\"100%\"}}>\r\n        <div className=\"game-board\" style={{marginLeft:\"auto\",marginRight:\"auto\"}}>\r\n\r\n\r\n              <Board\r\n                gameState={this.state.board}\r\n                handleStateUpdate={this.handleStateUpdate}\r\n                handleSystemMove={this.handleSystemMove}\r\n                handleReset={this.handleReset}\r\n              />\r\n              <Winner handleWinner={this.calculateWinner()} />\r\n\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Game;\r\n","import React from \"react-dom\";\nimport Game from \"./Game\";\n\n\nfunction App() {\n  return <div>\n    <Game/>\n  </div>\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}